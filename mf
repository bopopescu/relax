#! /usr/bin/python


# mf v0.5            22 July 2002        Edward d'Auvergne
#
# Program to process all model-free input and output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


import sys
from re import match

from main_model_free import main_model_free
from main_relax_fit import main_relax_fit
from common_ops import common_ops
from data import data
from file_ops import file_ops

sys.path.append(sys.path[0])
sys.path[0] = '.'
from usr_param import usr_param

from functions.mf_functions import mf_functions
from functions.mf_trans_functions import mf_trans_functions

from minimise.minimise import minimise

from model_selection.model_selection import modsel
from model_selection.asymptotic import asymptotic
from model_selection.bootstrap import bootstrap
from model_selection.cross_validation import cv
from model_selection.exp_overall_disc import exp_overall_disc
from model_selection.farrow import farrow
from model_selection.palmer import palmer
from model_selection.overall_disc import overall_disc

from palmer.main_palmer import main_palmer
from palmer.star import star


class mf:
	def __init__(self):
		"The top level class."

		self.version = 0.5
		self.print_intro()

		# Debugging option, 0 = off, 1 = on.
		self.debug = 0

		# Import the user parameters.
		self.usr_param = usr_param()
		if not self.version == self.usr_param.version:
			print "The versions numbers of the program and the file 'usr_param.py' do not match."
			print "Copy the correct version to the working directory, quitting program."
			sys.exit()

		# Initialise the class self.mf.function to place program functions into.
		self.mf_functions = mf_functions(self)
		self.mf_trans_functions = mf_trans_functions(self)
		self.modsel = modsel(self)

		# Select the behaviour of the program.
		if match(self.usr_param.program_type, 'relax_fit'):
			self.data = data(self)
			self.file_ops = file_ops(self)
			main_relax_fit(self)

		if match(self.usr_param.program_type, 'mf'):
			self.data = data(self)
			self.common_ops = common_ops(self)
			self.common_ops.update_data()
			self.file_ops = file_ops(self)
			self.modsel.asymptotic = asymptotic(self)
			self.modsel.bootstrap = bootstrap(self)
			self.modsel.cv = cv(self)
			self.modsel.exp_overall_disc =exp_overall_disc(self)
			self.modsel.farrow = farrow(self)
			self.modsel.palmer = palmer(self)
			self.modsel.overall_disc = overall_disc(self)
			self.minimise = minimise()
			main_model_free(self)

		if match(self.usr_param.program_type, 'palmer'):
			self.data = data(self)
			self.common_ops = common_ops(self)
			self.common_ops.update_data()
			self.file_ops = file_ops(self)
			self.modsel.asymptotic = asymptotic(self)
			self.modsel.bootstrap = bootstrap(self)
			self.modsel.cv = cv(self)
			self.modsel.exp_overall_disc =exp_overall_disc(self)
			self.modsel.farrow = farrow(self)
			self.modsel.palmer = palmer(self)
			self.modsel.overall_disc = overall_disc(self)
			self.star = star(self)
			main_palmer(self)


	def print_intro(self):
		"Print the program introduction."

		print """

		                      mf v0.5

		Program to process all model-free input and output.

		"""


if __name__ == "__main__":
	mf()
