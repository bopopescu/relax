###############################################################################
#                                                                             #
# Copyright (C) 2019 Troels Schwarz-Linnet                                    #
# Copyright (C) 2019 Edward d'Auvergne                                        #
#                                                                             #
# This file is part of the program relax (http://www.nmr-relax.com).          #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

language: python
env:
  global:
    - UPGRADE=false
    - MPI=false
    - WXPYTHON=false
    - OLD_MATPLOTLIB=false

matrix:
  include:
    # Default: Linux (Ubuntu Trusty 14.04), Python 2.7, single processor.
    #   https://docs.travis-ci.com/user/reference/trusty/
    - name: "Linux (Ubuntu 14.04), Python 2.7, single processor, all tests."
      python: 2.7
      language: python
      env: WXPYTHON=true OLD_MATPLOTLIB=true
      before_install:
        # Conda is used to install wxPython 3.0.
        - wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        #- conda update -q conda
        - conda info -a

        # xvfb setup for wxPython testing.
        - "export DISPLAY=:99.0"
        - "sh -e /etc/init.d/xvfb start"
        - sleep 3 # give xvfb some time to start

    # Linux (Ubuntu Trusty 14.04), Python 3.6, multi processor (2 MPI processors).
    # Python 3.6 is standard version on Redhat 7 and Ubuntu LTS 18.04 and TS 16.04
    - name: "Linux (Ubuntu 14.04), Python 3.6, MPI multi processor, no GUI tests."
      python: 3.6
      language: python
      env: MPI=true
      before_install:
        # apt-get install for OpenMPI http://wiki.nmr-relax.com/OpenMPI
        - sudo apt-get update && sudo apt-get install -y openmpi-bin libopenmpi-dev ssh

    # Linux (Ubuntu Xenial 16.04), Python 3.7.
    #   https://docs.travis-ci.com/user/reference/xenial
    #   https://github.com/travis-ci/travis-ci/issues/9815
    - name: "Linux (Ubuntu 16.04), Python 3.7, single processor, no GUI tests."
      python: 3.7
      language: python
      dist: xenial

    # Linux (Ubuntu Xenial 16.04), Python 3.7.
    # Try upgrade all pip packages.
    - name: "Linux (Ubuntu 16.04), Python 3.7, single processor, no GUI tests, upgraded pip packages."
      python: 3.7
      language: python
      dist: xenial
      env: UPGRADE=true

    # Mac OS X (10.13), Python 3.7.
    - name: "Mac OS X (10.13), Python 3.7, single processor, no GUI tests."
      os: osx
      language: sh
      python: 3.7
      before_install:
        - brew update
        - brew upgrade python3
        - python3 -m pip install virtualenv
        - virtualenv venv -p python3
        - source venv/bin/activate

    # MS Windows (10), Python 3.7.
    - name: "MS Windows (10), Python 3.7, single processor, no GUI tests."
      os: windows
      language: sh
      python: 3.7
      before_install:
        - choco install python3 --x86
        - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
        - python -m pip install --upgrade pip wheel
        # Install Microsoft-MPI : https://github.com/Microsoft/Microsoft-MPI
        # - wget -i "https://github.com"`curl -sL https://github.com/Microsoft/Microsoft-MPI/releases/latest | grep "download" | grep ".msi" | cut -d'"' -f2`
        # - wget -i "https://github.com"`curl -sL https://github.com/Microsoft/Microsoft-MPI/releases/latest | grep "download" | grep ".exe" | cut -d'"' -f2`
        # - msiexec.exe /i msmpisdk.msi ACCEPT=YES /qr+
        # - msmpisetup.exe -force -unattend
        # - set MSMPI
        # - rm msmpisdk.msi msmpisetup.exe

        # Works
        # - mpiexec -np 2 echo "hello world"
        # - mpiexec -np 2 python -m mpi4py -c "print('Hello')"
        # Do not work
        # - mpiexec -np 2 python relax --multi='mpi4py' -i
        # - mpiexec -np 2 python -m mpi4py relax --multi='mpi4py' -i

install:
    # Fail on first error.
    - set -e

    # Find Python.h to build with scons.
    - export PYTHON_INCLUDE_DIR=`python -c 'from distutils import sysconfig; print(sysconfig.get_python_inc())'`

    # Debugging printout of environmental variables.
    - echo "MPI=$MPI ; OS=$TRAVIS_OS_NAME ; PIPUPGRADE=$UPGRADE ; VIRTUAL_ENV=$VIRTUAL_ENV ; PYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR"

    # Get newer pip and whell for binary caching support.
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then sudo -H pip install --upgrade pip wheel; fi
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then sudo -H pip install --upgrade pip wheel; fi

    # Install python packages with pip: scons minfx bmrblib numpy scipy.
    - if [[ $UPGRADE == "false" ]]; then pip install -r devel_scripts/travis-ci/requirements.txt; fi
    - if [[ $UPGRADE == "true" ]]; then pip install -U -r devel_scripts/travis-ci/requirements.txt; fi

    # Manually install matplotlib for version compatibility.
    - if [[ $OLD_MATPLOTLIB == "true" ]]; then pip install matplotlib==2.2.4; else pip install matplotlib; fi

    # Install python package with pip for running with multiple processors.
    - if [[ $MPI == "true" ]]; then pip install mpi4py; fi

    # Install wxPython 3.0 using Conda.
    - if [[ $WXPYTHON == "true" ]]; then conda install -c https://conda.anaconda.org/travis wxpython; fi

    # Compile the C modules.
    - scons

script:
    # Fail on first error.
    - set -e

    # relax information printout.
    - if [[ $MPI == "false" ]]; then ./relax -i; fi
    - if [[ $MPI == "true" ]]; then mpirun -np 2 ./relax --multi='mpi4py' -i; fi

    # Single processor test suite execution.
    - if [[ $MPI == "false" && $WXPYTHON == "true"  ]]; then ./relax --time --test-suite; fi
    - if [[ $MPI == "false" && $WXPYTHON == "false" ]]; then ./relax --time --system-tests; fi
    - if [[ $MPI == "false" && $WXPYTHON == "false" ]]; then ./relax --time --unit-tests; fi
    - if [[ $MPI == "false" && $WXPYTHON == "false" ]]; then ./relax --time --verification-tests; fi

    # Multiple processor test suite execution.
    - if [[ $MPI == "true" && $WXPYTHON == "true"  ]]; then mpirun -np 2 ./relax --multi='mpi4py' --time --test-suite; fi
    - if [[ $MPI == "true" && $WXPYTHON == "false" ]]; then mpirun -np 2 ./relax --multi='mpi4py' --time --system-tests; fi
    - if [[ $MPI == "true" && $WXPYTHON == "false" ]]; then mpirun -np 2 ./relax --multi='mpi4py' --time --unit-tests; fi
    - if [[ $MPI == "true" && $WXPYTHON == "false" ]]; then mpirun -np 2 ./relax --multi='mpi4py' --time --verification-tests; fi

cache: pip
git:
  depth: 10

notifications:
  # https://docs.travis-ci.com/user/notifications/#configuring-email-notifications
  # Pull Request builds do not trigger email notifications.
  email:
    recipients:
      - nmr-relax-devel@lists.sourceforge.net
    on_success: change # default: change (always, never, change)
    on_failure: always # default: always
