###############################################################################
#                                                                             #
# Copyright (C) 2011 Edward d'Auvergne                                        #
#                                                                             #
# This file is part of the program relax.                                     #
#                                                                             #
# relax is free software; you can redistribute it and/or modify               #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation; either version 2 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# relax is distributed in the hope that it will be useful,                    #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with relax; if not, write to the Free Software                        #
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   #
#                                                                             #
###############################################################################

# Python module imports.
from os import sep

# relax module imports.
from base_classes import SystemTestCase
from data import Relax_data_store; ds = Relax_data_store()
from generic_fns.mol_res_spin import spin_loop
from status import Status; status = Status()


class Pdc(SystemTestCase):
    """TestCase class for the functional tests for the support of different peak intensity files."""

    def setUp(self):
        """Set up for all the functional tests."""

        # Create a data pipe.
        self.interpreter.pipe.create('mf', 'mf')


    def tearDown(self):
        """Reset the relax data storage object."""

        ds.__reset__()


    def test_pdc_read_noe(self):
        """Test the reading of a PDC NOE file."""

        # Read the sequence data.
        self.interpreter.sequence.read(file="seq", dir=status.install_path + sep+'test_suite'+sep+'shared_data'+sep+'pdc_files', res_num_col=2, res_name_col=1)

        # Read the PDC file.
        self.interpreter.pdc.read(file="testNOE.txt", dir=status.install_path + sep+'test_suite'+sep+'shared_data'+sep+'pdc_files')

        # Check the data pipe structures.
        self.assertEqual(cdp.frq[0], 600.13)
        self.assertEqual(cdp.frq_labels[0], '600')
        self.assertEqual(cdp.ri_labels[0], 'NOE')
        self.assertEqual(cdp.remap_table[0], 0)
        self.assertEqual(cdp.noe_r1_table[0], None)
        self.assertEqual(cdp.num_frq, 1)
        self.assertEqual(cdp.num_ri, 1)

        # The NOE values and errors.
        noe = [0.69399999999999995, 0.70599999999999996, 0.755, 0.73599999999999999, 0.72599999999999998, 0.73899999999999999, 0.68999999999999995, 0.60699999999999998, 0.58199999999999996, 0.54800000000000004, 0.66000000000000003, 0.746, 0.75900000000000001, 0.77600000000000002, 0.76300000000000001, 0.71599999999999997, 0.69499999999999995, 0.71999999999999997, 0.75600000000000001, 0.70399999999999996, 0.69499999999999995, 0.73699999999999999, 0.66700000000000004, 0.76000000000000001, 0.752, 0.746, 0.73399999999999999, 0.73999999999999999, 0.73599999999999999, 0.76600000000000001, 0.73099999999999998, 0.77800000000000002, 0.79100000000000004, 0.76900000000000002, 0.75800000000000001, 0.76900000000000002, 0.755, 0.76100000000000001, 0.75, 0.77700000000000002, 0.749, 0.752, 0.70899999999999996, 0.61899999999999999, 0.72699999999999998, 0.72399999999999998, 0.77900000000000003, 0.78100000000000003, 0.76200000000000001, 0.76900000000000002, 0.78700000000000003, 0.73499999999999999, 0.74199999999999999, 0.76800000000000002, 0.73699999999999999, 0.60499999999999998, 0.79600000000000004, 0.71699999999999997, 0.72199999999999998, 0.69499999999999995, 0.75800000000000001, 0.72899999999999998, 0.66600000000000004, 0.73399999999999999, 0.72699999999999998, 0.62, 0.34000000000000002, 0.16500000000000001, -0.432, -1.3]

        noe_err = [0.00027, 0.00029999999999999997, 0.00032000000000000003, 0.00029, 0.00029, 0.00027, 0.00032000000000000003, 0.00031, 0.00019000000000000001, 0.00022000000000000001, 0.00022000000000000001, 0.00033, 0.00025000000000000001, 0.00031, 0.00019000000000000001, 0.00027999999999999998, 0.00025000000000000001, 0.00025999999999999998, 0.00020000000000000001, 0.00029, 0.00038999999999999999, 0.00035, 0.00016000000000000001, 0.00036000000000000002, 0.00034000000000000002, 0.00040000000000000002, 0.00029999999999999997, 0.00022000000000000001, 0.00027999999999999998, 0.00031, 0.00025999999999999998, 0.00025000000000000001, 0.00025999999999999998, 0.00027, 0.00029, 0.00033, 0.00034000000000000002, 0.00036999999999999999, 0.00038000000000000002, 0.00038999999999999999, 0.00055000000000000003, 0.00029, 0.00029999999999999997, 0.00025000000000000001, 0.00040999999999999999, 0.00038000000000000002, 0.00033, 0.00038000000000000002, 0.00034000000000000002, 0.00033, 0.00027999999999999998, 0.00027999999999999998, 0.00027999999999999998, 0.00024000000000000001, 0.00036000000000000002, 0.00029, 0.00027, 0.00034000000000000002, 0.00029, 0.00024000000000000001, 0.00033, 0.00040000000000000002, 0.00027, 0.00038000000000000002, 0.00027, 0.00021000000000000001, 0.00017000000000000001, 0.00020000000000000001, 0.00027999999999999998, 0.00032000000000000003]

        # Loop over the spins.
        i = 0
        for spin in spin_loop():
            # Check the R1 value and error.
            self.assertAlmostEqual(spin.relax_data[0], noe[i])
            self.assertAlmostEqual(spin.relax_error[0], noe_err[i])

            # Increment the data index.
            i += 1


    def test_pdc_read_r1(self):
        """Test the reading of a PDC R1 file."""

        # Read the sequence data.
        self.interpreter.sequence.read(file="seq", dir=status.install_path + sep+'test_suite'+sep+'shared_data'+sep+'pdc_files', res_num_col=2, res_name_col=1)

        # Read the PDC file.
        self.interpreter.pdc.read(file="testT1.txt", dir=status.install_path + sep+'test_suite'+sep+'shared_data'+sep+'pdc_files')

        # Check the data pipe structures.
        self.assertEqual(cdp.frq[0], 600.13)
        self.assertEqual(cdp.frq_labels[0], '600')
        self.assertEqual(cdp.ri_labels[0], 'R1')
        self.assertEqual(cdp.remap_table[0], 0)
        self.assertEqual(cdp.noe_r1_table[0], None)
        self.assertEqual(cdp.num_frq, 1)
        self.assertEqual(cdp.num_ri, 1)

        # The R1 values and errors.
        r1 = [2.1929824561403506, 2.3315458148752621, 2.3485204321277595, 2.2492127755285649, 2.2794620469569185, 2.2197558268590454, 2.2401433691756272, 1.9681165124975399, 2.0881186051367719, 1.9976028765481419, 2.1645021645021645, 2.2727272727272729, 2.1992522542335604, 2.2794620469569185, 2.0872469213107911, 2.2846698652044779, 2.1079258010118043, 2.2431583669807091, 2.3490721165139767, 2.2753128555176336, 2.4673081667900321, 2.3957834211787254, 2.1335609131640707, 2.3623907394283012, 2.3849272597185784, 2.3272050267628575, 2.4207213749697409, 2.3724792408066429, 2.3430178069353325, 2.1929824561403506, 2.2381378692927485, 2.2461814914645104, 1.9912385503783354, 2.2935779816513762, 2.254791431792559, 2.2241992882562278, 2.2805017103762828, 2.1724961981316535, 2.2794620469569185, 2.2660321776569226, 2.17296827466319, 2.1915406530791146, 2.2016732716864817, 2.1141649048625792, 2.244668911335578, 2.1335609131640707, 2.0458265139116203, 2.1920210434020166, 2.2753128555176336, 2.369106846718787, 2.2983222247759136, 2.3769907297361539, 2.2256843979523704, 2.2846698652044779, 2.3424689622862496, 1.9739439399921039, 2.164970772894566, 2.3191094619666046, 2.1891418563922942, 2.1815008726003491, 2.2680880018144705, 2.2466861379465288, 2.2487069934787498, 2.3153507756425098, 2.1758050478677111, 2.1635655560363478, 1.8566654288897142, 1.6126431220770845, 1.162655505173817, 0.76277650648360029]

        r1_err = [0.014880999866157337, 0.016305389907315549, 0.020367500401919193, 0.016689952594696567, 0.015719600127590123, 0.014519007231526706, 0.021884455409060793, 0.031553210947800121, 0.013516722288950796, 0.012451584734646201, 0.017587777848252526, 0.01930614083600117, 0.013710416815416748, 0.018438721559581889, 0.011700308337951106, 0.014868730296918082, 0.015735896582880042, 0.013907177012972227, 0.011940490758549173, 0.018297535992639891, 0.022613307092069063, 0.018089794212302137, 0.011600342247785368, 0.020466269084813589, 0.016622000917262632, 0.018913175295357285, 0.016740970503641386, 0.014809677834126811, 0.014473222171486666, 0.01312685322667804, 0.014051156180670562, 0.011839239769408007, 0.010845154260145616, 0.012710100746575557, 0.01475504841339422, 0.018224044737379666, 0.021726136339921612, 0.023445123352435857, 0.020589999021856674, 0.021775569733310626, 0.048389829224705166, 0.014865103396879045, 0.015545246293344644, 0.014289738293510547, 0.019752536366294992, 0.01856381644950281, 0.013291261423732419, 0.017645560818005727, 0.022974561757993714, 0.017861486652818469, 0.013101517824931564, 0.01624275795401255, 0.01547797093546942, 0.012509889833705046, 0.018324767779254535, 0.012864018945770517, 0.0098056514488911589, 0.019461796684650767, 0.015102297844042096, 0.015366135101206419, 0.020267745263014409, 0.0203686835395216, 0.015797113541504586, 0.020433831608517763, 0.014402108143244772, 0.012423043539408495, 0.0098446747338726565, 0.011086795327428331, 0.013080860844231643, 0.0029557520393643042]

        # Loop over the spins.
        i = 0
        for spin in spin_loop():
            # Check the R1 value and error.
            self.assertAlmostEqual(spin.relax_data[0], r1[i])
            self.assertAlmostEqual(spin.relax_error[0], r1_err[i])

            # Increment the data index.
            i += 1
