###############################################################################
#                                                                             #
# Copyright (C) 2008,2011,2013-2014,2019 Edward d'Auvergne                    #
#                                                                             #
# This file is part of the program relax (http://www.nmr-relax.com).          #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

# Python module imports.
import dep_check
from re import search, split
import sys
from time import time
from traceback import print_exception
from unittest import TextTestRunner
if dep_check.wx_module:
    import wx

# relax module imports.
from lib.compat import StringIO
from lib.compat import TextTestResult
from status import Status; status = Status()
from test_suite.formatting import divider, format_test_name, test_title


class RelaxTestResult(TextTestResult):
    """A replacement for the TextTestResult class.

    This class is designed to catch STDOUT and STDERR during the execution of each test and to
    prepend the output to the failure and error reports normally generated by TextTestRunner.
    """

    def __init__(self, stream, descriptions, verbosity, timing=False, category=None, io_capture=True):
        """Initialise the RelaxTestResult object with relax specific variables.

        @keyword timing:        A flag which if True will enable timing of individual tests.
        @type timing:           bool
        @keyword category:      The type of test being performed, to allow the printouts to be changed.  This can be one of 'system', 'unit', 'gui', or 'verification'.
        @type category:         str
        @keyword io_capture:    A flag which if True will cause all IO to be captured and only printed out for failing or error tests.
        @type io_capture:       bool
        """

        # Normal setup.
        super(RelaxTestResult, self).__init__(stream, descriptions, verbosity)

        # Store the flags and category.
        self.timing_flag = timing
        self.io_capture = io_capture
        self.category = category


    def addError(self, test, err):
        """Override of the TestResult.addError() method.

        The STDOUT and STDERR captured text is prepended to the error text here.


        @param test:    The test object.
        @type test:     TestCase instance
        @param err:     A tuple of values as returned by sys.exc_info().
        @type err:      tuple of values
        """

        # Extra formatting for no IO capture.
        if not self.io_capture:
            self.stream.write(self._exc_info_to_string(err, test))
            divider('-', width=100)

        # Execute the base class method to print the 'E' and handle the error.
        super(RelaxTestResult, self).addError(test, err)

        # Prepend the STDOUT and STDERR messages to the second element of the tuple.
        if self.io_capture:
            self.errors[-1] = (self.errors[-1][0], self.capt.getvalue() + self.errors[-1][1])

        # Write out timing info.
        if self.timing_flag or not self.io_capture:
            self.write_time(test.id())


    def addFailure(self, test, err):
        """Override of the TestResult.addFailure() method.

        The STDOUT and STDERR captured text is prepended to the failure text here.


        @param test:    The test object.
        @type test:     TestCase instance
        @param err:     A tuple of values as returned by sys.exc_info().
        @type err:      tuple of values
        """

        # Extra formatting for no IO capture.
        if not self.io_capture:
            self.stream.write(self._exc_info_to_string(err, test))
            divider('-', width=100)

        # Execute the base class method to print the 'F' and handle the failure.
        super(RelaxTestResult, self).addFailure(test, err)

        # Prepend the STDOUT and STDERR messages to the second element of the tuple.
        if self.io_capture:
            self.failures[-1] = (self.failures[-1][0], self.capt.getvalue() + self.failures[-1][1])

        # Write out timing info.
        if self.timing_flag or  not self.io_capture:
            self.write_time(test.id())


    def addSuccess(self, test):
        """The method for a successful test.

        @param test:    The test object.
        @type test:     TestCase instance
        """

        # Extra formatting for no IO capture.
        if not self.io_capture:
            divider('-', width=100)

        # Execute the base class method to print the '.'.
        super(RelaxTestResult, self).addSuccess(test)

        # Write out timing info.
        if self.timing_flag or not self.io_capture:
            self.write_time(test.id())


    def startTest(self, test):
        """Override of the TextTestResult.startTest() method.

        The start of STDOUT and STDERR capture occurs here.
        """

        # IO capture.
        if self.io_capture:
            # Store the original STDOUT and STDERR for restoring later on.
            self.orig_stdout = sys.stdout
            self.orig_stderr = sys.stderr

            # Catch stdout and stderr.
            self.capt = StringIO()
            sys.stdout = self.capt
            sys.stderr = self.capt

        # No capture.
        else:
            test_title(format_test_name(test.id()), desc=test.shortDescription())

        # Place the test name in the status object.
        status.exec_lock.test_name = str(test)

        # Store the starting time.
        if self.timing_flag or not self.io_capture:
            self.time = time()

        # Execute the normal startTest method.
        super(RelaxTestResult, self).startTest(test)


    def stopTest(self, test):
        """Override of the TextTestResult.stopTest() method.

        The end of STDOUT and STDERR capture occurs here.
        """

        # Restore the IO streams.
        if self.io_capture:
            sys.stdout = self.orig_stdout
            sys.stderr = self.orig_stderr


    def write_time(self, test_name):
        """Write the timing of the test to the stream.

        @param test_name:   The TestCase name.
        @type test_name:    str
        """

        # Subtract the end time from the start time.
        self.time -= time()

        # Format the name.
        test_name = format_test_name(test_name)

        # The printout.
        if self.category == 'unit':
            time_str = '%7.2f ms' % (abs(self.time) * 1000)
        else:
            time_str = '%7.2f s' % abs(self.time)
        self.stream.write('  %s for %s\n' % (time_str, test_name))



class GuiTestResult(RelaxTestResult):
    """A replacement for the TextTestResult class for the GUI."""

    def stopTest(self, test):
        """Override of the RelaxTestResult.stopTest() method.

        The end of STDOUT and STDERR capture occurs here.
        """

        # Execute the RelaxTestResult.stopTest() method.
        super(GuiTestResult, self).stopTest(test)

        # Yield to allow the GUI to be updated.
        wx.GetApp().Yield(True)



class RelaxTestRunner(TextTestRunner):
    """A replacement unittest runner.

    This runner is designed to catch STDOUT during the execution of each test and to prepend the
    output to the failure and error reports normally generated by TextTestRunner.
    """

    # Variable for specifying the type of test being performed, to change the printout.
    category = None

    def __init__(self, stream=sys.stderr, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, timing=False, io_capture=True):
        """Initialise the class, storing the timing flag.

        @keyword timing:        A flag which if True will enable timing of individual tests.
        @type timing:           bool
        @keyword io_capture:    A flag which if True will cause all IO to be captured and only printed out for failing or error tests.
        @type io_capture:       bool
        """

        # Execute the base method (with different Python version compatibility).
        if (sys.version_info[0] == 3 and sys.version_info[1] == 1) or (sys.version_info[0] == 2 and sys.version_info[1] <= 6):
            super(RelaxTestRunner, self).__init__(stream=stream, descriptions=descriptions, verbosity=verbosity)
        else:
            super(RelaxTestRunner, self).__init__(stream=stream, descriptions=descriptions, verbosity=verbosity, failfast=failfast, buffer=buffer, resultclass=resultclass)

        # Store the flags.
        self.timing_flag = timing
        self.io_capture = io_capture


    def _makeResult(self):
        """Override of the TextTestRunner._makeResult() method."""

        return RelaxTestResult(self.stream, self.descriptions, self.verbosity, timing=self.timing_flag, io_capture=self.io_capture, category=self.category)



class GuiTestRunner(TextTestRunner):
    """A replacement unittest runner.

    This runner is designed to catch STDOUT during the execution of each test and to prepend the
    output to the failure and error reports normally generated by TextTestRunner.
    """

    def __init__(self, stream=sys.stderr, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, timing=False, io_capture=True):
        """Initialise the class, storing the timing flag.

        @keyword timing:        A flag which if True will enable timing of individual tests.
        @type timing:           bool
        @keyword io_capture:    A flag which if True will cause all IO to be captured and only printed out for failing or error tests.
        @type io_capture:       bool
        """

        # Execute the base method.
        if (sys.version_info[0] == 3 and sys.version_info[1] == 1) or (sys.version_info[0] == 2 and sys.version_info[1] <= 6):
            super(GuiTestRunner, self).__init__(stream=stream, descriptions=descriptions, verbosity=verbosity)
        else:
            super(GuiTestRunner, self).__init__(stream=stream, descriptions=descriptions, verbosity=verbosity, failfast=failfast, buffer=buffer, resultclass=resultclass)

        # Store the flags.
        self.timing_flag = timing
        self.io_capture = io_capture


    def _makeResult(self):
        """Override of the TextTestRunner._makeResult() method."""

        return GuiTestResult(self.stream, self.descriptions, self.verbosity, timing=self.timing_flag, io_capture=self.io_capture)
