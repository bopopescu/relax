#! /usr/bin/python

from inspect import formatargspec, getargspec, getdoc
from re import search
import sys
from string import split

# Add the path to the relax base directory.
sys.path.append(sys.path[0])
sys.path[0] = '../..'

# Import the program relax.
from prompt.interpreter import Interpreter


class Fetch_docstrings:
    def __init__(self):
        """Fetch all the docstrings of the user functions and format them LaTeX style."""

        # Some dummy data structures.
        self.script_file = None
        self.intro_string = ''
        self.dummy_mode = 1

        # Start the interpreter!
        self.interpreter = Interpreter(self)
        self.interpreter.run()

        # Get the blacklisted objects.
        self.get_blacklist()

        # Open the LaTeX file.
        self.file = open('docstring.tex', 'w')

        # Get the names of the data structures.
        names = self.local.keys()

        # Alphabetically sort the names of the data structures.
        names.sort()

        # Loop over the data structures.
        for name in names:
            # Skip the name if it is in the blacklist.
            if name in self.blacklist:
                continue

            # Get the object.
            object = self.local[name]

            # Determine if the structure is user function containing class.
            if hasattr(object, '__relax_help__'):
                # Document the user class.
                self.doc_user_class(name, object)

            # Skip the object if there is no docstring.
            if not hasattr(object, '__doc__') or not object.__doc__:
                continue

            # Print the docstring.
            self.print_docstring(name, object)

        # Close the LaTeX file.
        self.file.close()


    def doc_user_class(self, parent_name, parent_object):
        """Document the user class."""

        # Get the names of the data structures.
        names = dir(parent_object)

        # Alphabetically sort the names of the data structures.
        names.sort()

        # Loop over the data structures.
        for name in names:
            # Skip names begining with an underscore.
            if search('^_', name):
                continue

            # Get the object.
            object = getattr(parent_object, name)

            # Skip the object if there is no docstring.
            if not hasattr(object, '__doc__') or not object.__doc__:
                continue

            # Print the docstring.
            self.print_docstring(parent_name + '.' + name, object)


    def get_blacklist(self):
        """Maintained list of objects in the interpreter namespace which should not be documented."""

        # Initialise the list.
        self.blacklist = []

        # Skip these.
        self.blacklist.append('Numeric')
        self.blacklist.append('pi')
        self.blacklist.append('script')


    def latex_quotes(self, string):
        """Function for changing the quotes for LaTeX processing."""

        # Initialise.
        new_string = ''
        in_quote = 0

        # Loop over the characters.
        for i in xrange(len(string)):
            # Find the quote marks.
            if search('\'', string[i]):
                # Swap the opening ' with `.
                if not in_quote:
                    new_string = new_string + '`'
                    in_quote = 1
                    continue

                # Just exited the quote
                else:
                    in_quote = 0

            # Append the character.
            new_string = new_string + string[i]

        return new_string


    def print_docstring(self, function, object):
        """Function for creating the LaTeX file."""

        # Initialise.
        #############

        # Comment out underscores in the function name.
        function_name = self.underscore_fix(function)

        # Get the docstring.
        docstring = getdoc(object)

        # Split the docstring by newline characters.
        lines = split(docstring, '\n')


        # Subsection.
        #############

        # Start a new page.
        self.file.write('\n\n\\newpage')

        # Write the function name.
        self.file.write('\n\n\subsection{' + function_name + '}\n\n')


        # Synopsis.
        ###########

        # Heading.
        self.file.write('\n\\subsubsection{Synopsis:}\n\n')

        # Write the synopsis.
        self.file.write(self.latex_quotes(self.underscore_fix(lines[0])) + '\n')


        # Arguments.
        ############

        # Heading.
        self.file.write('\n\\subsubsection{Default arguments:}\n\n')

        # Typewriter font.
        self.file.write('\\textsf{')

        # Function name.
        self.file.write('\\textbf{' + function_name + '}')

        # Get the arguments.
        args, varargs, varkw, defaults = getargspec(object)

        # Argument string.
        arguments = formatargspec(args, varargs, varkw, defaults)

        # Change the format for LaTeX.
        tex_arguments = self.latex_quotes(arguments)

        # Write the synopsis.
        self.file.write(self.underscore_fix(tex_arguments) + '\n')

        # End typewriter font.
        self.file.write('}\n\n')


        # Docstring.
        ############

        # Heading.
        self.file.write('\n\\subsubsection{Docstring:}\n\n')

        # Script sized font.
        self.file.write('{\\scriptsize\n')

        # Start a verbatim environment.
        self.file.write('\\begin{verbatim}\n\n')

        # Loop over the lines.
        for i in xrange(len(lines)):
            # Skip the first line (synopsis) and the second line (blank).
            if i == 0 or i == 1:
                continue

            # Write the line.
            self.file.write(self.latex_quotes(lines[i]) + '\n')

        # End the verbatim environment.
        self.file.write('\\end{verbatim}\n')

        # Return to normal font.
        self.file.write('}\n\n')


    def underscore_fix(self, string):
        """Function for commenting out underscrores in a piece of text."""

        # Split by underscore.
        row = split(string, '_')

        # Initialise the text.
        text = row[0]

        # Loop over the sections of text separated by underscores.
        for i in range(len(row)-1):
            text = text + '\_' + row[i+1]

        # Return the new text.
        return text


if __name__ == '__main__':
    Fetch_docstrings()
