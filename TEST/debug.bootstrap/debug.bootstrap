#! /data03/dauvergne/bin/python

import sys
from math import pi
from re import match
from string import split

sys.path.append(sys.path[0])
sys.path[0] = '.'
sys.path.append('../../')
from usr_param import usr_param

from calc_relax_data import calc_relax_data
from data import data
from file_ops import file_ops


class test:
	def __init__(self):

		self.calc_relax_data = calc_relax_data(self)
		self.file_ops = file_ops(self)
		self.data = data(self)
		self.data.usr_param = usr_param()

		input = self.file_ops.open_input()
		self.extract_input(input)
		self.data.calc_frq()
		self.data.calc_constants()
		tm = 1e-8
		mf_params = [0.698, 0.970, 4]
		types = [ ['NOE', 600], ['R1', 600], ['R2', 600], ['NOE', 500], ['R1', 500], ['R2', 500] ]
		temp = self.calc_relax_data.calc(tm, 'm5', types, mf_params)

		for i in range(len(self.data.frq)):
			for j in range(len(self.data.frq[i])):
				print "Frq " + `i` + ": " + `self.data.frq[i][j]/(2*pi) * 1e-6` + " MHz"
		print "\nThe dipolar constant is: " + `self.data.dipole_const*1e-9` + " * 10^9"
		for i in range(len(self.data.csa_const)):
			print "The CSA constant at a MHz is: " + `self.data.csa_const[i]*1e-9` + " * 10^9"
		print "The CSA is: " + `self.data.usr_param.const['csa']` + " ppm\n"

		for i in range(len(temp)):
			print `types[i][1]` + " MHz " + types[i][0] + " " + `temp[i]`


	def extract_input(self, input):
		"Extract all the information from the input file."

		lines = input.readlines()
		frq = 0
		num_data = 0
		for i in range(len(lines)):
			row = [[]]
			row[0] = split(lines[i])
			try:
				row[0][0]
			except IndexError:
				continue
			if match('NMR_frq_label', row[0][0]):
				self.data.nmr_frq.append([])
				row.append(split(lines[i+1]))
				row.append(split(lines[i+2]))
				row.append(split(lines[i+3]))
				row.append(split(lines[i+4]))
				# NMR data.
				self.data.nmr_frq[frq].append(row[0][1])
				self.data.nmr_frq[frq].append(row[1][1])
				# R1 data.
				if not match('none', row[2][1]):
					self.data.nmr_frq[frq].append('1')
					self.data.input_info.append([])
					self.data.relax_data.append([])
					self.data.input_info[num_data].append("R1")
					self.data.input_info[num_data].append(row[0][1])
					self.data.input_info[num_data].append(float(row[1][1]))
					self.data.input_info[num_data].append(row[2][1])
					num_data = num_data + 1
				else:
					self.data.nmr_frq[frq].append('0')
				# R2 data.
				if not match('none', row[3][1]):
					self.data.nmr_frq[frq].append('1')
					self.data.input_info.append([])
					self.data.relax_data.append([])
					self.data.input_info[num_data].append("R2")
					self.data.input_info[num_data].append(row[0][1])
					self.data.input_info[num_data].append(float(row[1][1]))
					self.data.input_info[num_data].append(row[3][1])
					num_data = num_data + 1
				else:
					self.data.nmr_frq[frq].append('0')
				# NOE data.
				if not match('none', row[4][1]):
					self.data.nmr_frq[frq].append('1')
					self.data.input_info.append([])
					self.data.relax_data.append([])
					self.data.input_info[num_data].append("NOE")
					self.data.input_info[num_data].append(row[0][1])
					self.data.input_info[num_data].append(float(row[1][1]))
					self.data.input_info[num_data].append(row[4][1])
					num_data = num_data + 1
				else:
					self.data.nmr_frq[frq].append('0')
				frq = frq + 1
		self.data.num_frq = frq
		self.data.num_data_sets = num_data


if __name__ == "__main__":
	test()
